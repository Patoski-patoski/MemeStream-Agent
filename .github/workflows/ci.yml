name: CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Dockerfile'
      - 'render.yaml'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: patrickpatoski/meme-bot

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      MEME_URL: https://imgflip.com/memegenerator
      TELEGRAM_BOT_TOKEN: dummy-token-for-testing
    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v4

      # 2. Setup Node.js with caching - Updated to Node 20
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. Install dependencies (npm ci is faster and more reliable for CI)
      - name: Install dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers  
        id: cache-playwright
        uses: actions/cache@v4  
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # 5. Install Playwright browsers if not cached (match Dockerfile)
      - name: Install Playwright browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      # 6. Lint code
      - name: Lint code
        run: npx eslint './src/**/*.ts' './tests/**/*.ts' --fix -f stylish

      # 7. Run tests
      - name: Run tests
        run: npm test

      # 8. Build project (verify it builds)
      - name: Build project
        run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      MODEL_NAME: ${{ secrets.MODEL_NAME }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      MEME_URL: ${{ secrets.MEME_URL }}
      TAG_MEME: ${{ secrets.TAG_MEME }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      PORT: ${{ secrets.PORT }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      UPSTASH_REDIS_URL: ${{ secrets.UPSTASH_REDIS_URL }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    
    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v4

      # 2. Set up Docker Buildx for advanced features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # 4. Extract metadata for tags and labels
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # 5. Free up disk space before build
      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          docker system prune -af

      # 6. Build and push Docker image with caching and retry logic
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Enable BuildKit for cache mounts
          provenance: false
          # Add build timeout and retry on failure
          outputs: type=registry
        env:
          BUILDKIT_PROGRESS: plain
        
      # 7. Verify the image was pushed successfully
      - name: Verify Docker image
        run: |
          docker pull ${{ env.IMAGE_NAME }}:latest
          docker inspect ${{ env.IMAGE_NAME }}:latest
