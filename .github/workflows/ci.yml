# .github/workflows/ci.yml

name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: patrickpatoski/meme-bot

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v4

      # 2. Setup Node.js with caching
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Match Dockerfile
          cache: 'npm'

      # 3. Install dependencies (npm ci is faster and more reliable for CI)
      - name: Install dependencies
        run: npm ci

      # 4. Cache Playwright browsers
      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-chromium-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-chromium-

      # 5. Install Playwright browsers if not cached (match Dockerfile)
      - name: Install Playwright browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      # 6. Lint code
      - name: Lint code
        run: npx eslint './src/**/*.ts' './tests/**/*.ts' --fix -f stylish

      # 7. Run tests
      - name: Run tests
        run: npm test

      # 8. Build project (verify it builds)
      - name: Build project
        run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v4

      # 2. Set up Docker Buildx for advanced features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # 4. Extract metadata for tags and labels
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # 5. Build and push Docker image with caching
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64  # Multi-arch support
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Enable BuildKit for cache mounts
          provenance: false